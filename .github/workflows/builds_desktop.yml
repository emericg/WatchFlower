#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: "Desktop CI builds"
on:
  push:
  pull_request:
  workflow_dispatch:

#-------------------------------------------------------------------------------
# Define application name & version
#-------------------------------------------------------------------------------

env:
  APP_NAME: "WatchFlower"
  APP_VERSION: "6.0"
  QT_VERSION: "6.9.2"

#-------------------------------------------------------------------------------
# Workflow jobs
#-------------------------------------------------------------------------------

jobs:
  ## GNU/Linux build ###########################################################
  build-linux:
    name: "Linux CI build"
    runs-on: ubuntu-22.04
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install dependencies (from package manager)
      - name: Install dependencies (from package manager)
        run: |
             sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-dev libx11-xcb-dev libzstd-dev -y;
             sudo apt-get install cmake ninja-build pkgconf libtool -y;
             sudo apt-get install libfuse2 appstream -y;

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          modules: qtconnectivity qtcharts qtpositioning

      # Build application
      - name: Build application
        run: |
             cmake --version
             cmake -B build/ -DCMAKE_BUILD_TYPE=Release -G Ninja
             cmake --build build/ --config Release

      # Deploy application
      - name: Deploy application
        run: ./deploy_linux.sh -c -i -p

      # Upload application ZIP
      - name: Upload application ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.tar.gz
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.tar.gz

      # Upload AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage

  ## macOS build ###############################################################
  build-mac:
    name: "macOS CI build"
    runs-on: macos-15
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install dependencies (from package manager)
      #- name: Install dependencies (from package manager)
      #  run: |
      #       brew install qt6 cmake ninja

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          modules: qtconnectivity qtcharts qtpositioning

      # Build application
      - name: Build application
        run: |
             export CMAKE_BUILD_PARALLEL_LEVEL=`sysctl -n hw.logicalcpu`
             cmake --version
             cmake -B build/ -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
             cmake --build build/ --config Release

      # Deploy application
      - name: Deploy application
        run: ./deploy_macos.sh -c -p

      # Upload application ZIP
      - name: Upload application ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-macOS.zip
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-macOS.zip

  ## Windows build #############################################################
  build-windows:
    name: "Windows CI build"
    runs-on: windows-2022
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Configure MSVC
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86_64

      # Install NSIS (already installed in 'windows-2022')
      #- name: Install NSIS
      #  run: |
      #       Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
      #       scoop bucket add extras
      #       scoop install nsis

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          modules: qtconnectivity qtcharts qtpositioning
          arch: 'win64_msvc2022_64'

      # Build application
      - name: Build application
        run: |
             cmake --version
             cmake -B build/ -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles"
             cd build/
             nmake

      # Deploy application
      - name: Deploy application
        run: sh deploy_windows.sh -c -p

      # Upload application ZIP
      - name: Upload application ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.zip
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.zip

      # Upload NSIS installer
      - name: Upload NSIS installer
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.exe
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.exe
